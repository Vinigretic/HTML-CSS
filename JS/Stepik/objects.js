//Поскольку JavaScript является объектно-ориентированным языком программирования, он позволяет нам определять свои
//собственные объекты и создавать свои типы переменных. И поскольку все типы данных, рассматриваемые в этом модуле,
//являются объектами, то мы вынуждены начать с изучения объектов и методов работы с ними.
//
//Итак, объект - это особый вид данных, обладающий свойствами, описывающими его состояние и методами, позволяющими работать
//с объектом.
//
//Если вдаваться в подробности, то объект в JavaScript представляет собой ассоциативный массив, то есть фактически является
//набором пар "ключ: значение". Например, у строкового объекта String, коим является любая строковая переменная, есть свойство
// length - длина. В частности, у объекта textString, созданного командой var textString = "Hello World!"; будет свойство
//length, ключом в паре будет имя "length", а его значение будет число 12 - фактическая длина строки.

//Свойства объекта - это некоторые значения, связанные с этим объектом.
//
//Синтаксис доступа к свойству объекта выглядит следующим образом:
//имяОбъекта.имяСвойства
//
//Для примера рассмотрим строковый объект String. У него есть свойство length (длина), которое определяет количество символов в строке. Чтобы обратиться к этому свойству, мы используем название свойства через точку. Например:
//
//var textString = "Hello world!";
//console.log(textString.length);
//В результате выполнения данного кода в консоль вывода будет выдано количество символов в этой строке - 12.

//Методы - это действия, которые могут быть выполнены над объектом. Они могут присутствовать у объекта, а могут и не
//присутствовать.
//
//Синтаксис доступа к методу выглядит следующим образом:
//
//имяОбъекта.имяМетода();
//
//(В скобках указываются параметры, которые необходимо передать в метод. Их еще называют "аргументами".)
//
//Например у строкового объекта String есть метод toUpperCase(), который возвращает содержимое  нашего объекта,
//то есть текст, заглавными буквами. В частности выполнение кода:
//
//var textString = "Hello world!";
//console.log(textString.toUpperCase());
//приведет к выводу в консоль текста "HELLO WORLD!" (все буквы станут заглавными).

//Теперь рассмотрим подробнее процесс создания объекта и работы с его свойствами и методами.
//
//Для создания объекта есть два пути - создание напрямую экземпляра объекта и создание конструктора - отдельной функции,
//которая создает и инициализирует объект.
//
//Для создания непосредственно экземпляра объекта мы можем воспользоваться двумя конструкциями:
//
//var person = new Object();
//или просто
//
//var person = {};

//Для создания объекта через конструктор мы должны описать функцию, которая будет создавать объект и присваивать значения
//его свойствам. Функция будет выглядеть следующим образом:

//function Person(name, age, year) {
//  this.name = name;
//  this.age = age;
//  this.year = year;
//}
//
//Внутри функции мы присваиваем переданные в функцию данные через выражение this - обращение к текущему экземпляру объекта.
//(Более подробно ключевое слово this мы рассмотрим в конце урока).
//
//Создание экземпляра объекта с помощью нашего конструктора осуществляется следующим образом:
//
//var employee1 = new Person("Ivan","25","2017");
//var employee2 = new Person("Olga","21","2016");
//var employee3 = new Person("Oleg","32","2010");
//Важно отметить, что название конструктора принято писать с большой буквы, чтобы отметить что это конструктор и его
// необходимо вызывать с ключевым словом new. В противном случае this в теле конструктора будет указывать на что угодно,
//только не на созданный объект.

//Для добавления нового свойства объекта также есть два варианта.
//
//Person.name = "Ivan"
//или
//
//Person['name'] = "Ivan"
//Также можно добавлять свойства сразу при создании объекта, указав список свойств в фигурных скобках:
//
//var Person = {
//name : "Ivan",
//age : 25,
//hiredYear : 2017
//}
//Соответственно, для доступа к этому свойству тоже можно воспользоваться двумя вариантами:
//console.log(Person.name);
//или
//console.log(Person['name'])
//В случае если мы пытаемся обратиться к свойству, которого у объекта нет, то результат будет 'undefined', так называемое
//"неопределенное значение".
//
//Для удаления свойства используется оператор delete:
//
//delete Person.name;

//Добавление метода в объект осуществляется с помощью следующего синтаксиса:
//
//var person = {};                                  //Объявляем объект person
//person.sayAge = function(n) {                    //Объявляем метод sayAge для объекта person
//console.log("Person is " + n + " years old");  //Тело метода sayAge - вывод текста
//};
//В данном примере при вызове метода:
//
//person.sayAge(22);
//Произойдет вывод в консоль текста "Person is 22 years old".
//
//Добавление метода в объект - это фактически присвоение функции некоторому свойству объекта. В предыдущем примере мы
//присвоили функцию function(n) свойству sayAge объекта person .

//Как правило нам необходимо чтобы метод не просто выполнял некоторые действия, а использовал какие-либо свойства объекта,
// в котором он хранится. Для того, чтобы получить доступ к свойствам объекта из метода используется ключевое слово this.
//Слово this никаким образом не связано с самим объектом, оно всего лишь обозначает объект, вызвавший этот метод.
//В данном примере метод sayName будет выводить фразу "My name is Ivan":
//
//var person = {
//name : "Ivan",
// age : 25,
// hiredYear : 2017
//}
//
//
//person.sayName = function() {
// console.log("My name is " + this.name);
//}

//Теперь мы можем более подробно рассмотреть оператор, осуществляющий  перебор всех свойств и методов объекта, мельком
//упомянутый в предыдущем модуле - конструкцию for .. in.

//Синтаксис команды выглядит следующим образом:
//for (key in object){}, где key - название свойства, object - название объекта, а обращение к содержимому свойства
//осуществляется через выражение object[key].
//
//Давайте рассмотрим пример, создадим объект и в нем метод, выводящий в консоль все свойства этого объекта:
//
//var person = {
//name : "Ivan",
//age : 25,
//hiredYear : 2017
//}
//
//person.sayAll = function() {
//  for (var i in this) {
// console.log(i + " is " + this[i]);
//  }
//}