//В JavaScript мы имеем два вида циклов:
//for - выполнение кода указанное количество раз
//while - выполнение кода пока истинно заданное условие.

//Цикл For используется в тех случаях, когда мы можем определить заранее - сколько раз должен выполниться заданный блок кода.
//
//Синтаксис команды выглядит так :
//
//for (переменная=начальное_значение;
////первым задается начальное значение переменной-счетчика
//
//переменная <= конечное_значение;
////после этого задается условие, которое проверяется при выполнении каждого цикла
//
//переменная = переменная + шаг)
////и наконец последним задается операция изменения состояния переменной-счетчика
//
//{
//    // исполняемый код
//}
//
//Например:
//
//for (let i = 1; i < 3; i = i + 1) {
//  console.log("i = " + i);
//}
//Результатом выполнения данного цикла будет пятикратное выведение значения переменной i в виде i = 1, i = 2и т.д.
//В первой строчке мы задаем параметры работы цикла:
//
//i = 1       //Устанавливаем значение, с которого будет начинаться счет.
//i < 3       //Указываем условие, которое будет проверяться каждый цикл (обычно говорят - каждую итерацию)
//i = i + 1   //Указываем как будет изменяться счетчик при каждой следующей итерации - увеличиваться на 1
//В фигурных скобках мы пишем тело цикла - тот код, который будет выполняться каждое повторение цикла, пока верно наше условие.
//
//{
//  console.log("i = " + i);  //Тело цикла. В нашем случае - вывод в консоль текста "i =  " и значения переменной i
//}

//У цикла for существует еще одна разновидность - конструкция for ... in

//Например, приведенный ниже код выведет все свойства объекта car
//
//for (i in car) {
//  console.log(car[i] + ' ');
//}

//цикл while
//while (выражение, возвращающее логическое значение) {
////в цикле может использоваться, например, оператор сравнения вида x == 10 или просто переменная типа Boolean
//
//исполняемый код
//}
//Например :
//
//var x = 1;
////объявляем и инициализируем переменную, которую
////мы будем использовать как условие цикла
//while (x <= 5) {
//  console.log(" x= " + x);
//  x = x + 1;
//}
//В результате выполнения данного кода произойдет пятикратный вывод значения переменной х.

//У цикла while есть разновидность : конструкция do ... while
//Данная конструкция отличается от предыдущей тем, что оператор проверки условия расположен ПОСЛЕ основного тела исполняемого кода, что обеспечивает как минимум однократное выполнение блока кода.
//
//Синтаксис выглядит следующим образом:
//
//do {
//  исполняемый код
//} while (переменная == проверочное значение);
//Приведем пример использования этой конструкции:
//
//var x = 5;                //установка начального значения
//do {                 //начало выполнения цикла
//  console.log(x);         //вывод данных в консоль
//  x = x - 1;        //уменьшение значения на 1
//} while (x >= 1);    //проверка условия
//В данном случае программа будет выводить в консоль значение переменной "х" в диапазоне от 5 до 1, результат будет "54321"

//прерывание цикла - break и continue.
//
//Ключевое слово break позволяет нам прервать цикл и перейти к коду, следующему после цикла.
//Рассмотрим пример:
//
//for (i = 1; i < 10; i = i + 1) {
//  if (i == 5) {
//    break;
//  }
//  console.log('i= '+i);
//}
//В данном случае цикл прервется при достижении переменной i значения 5. До этого момента каждую итерацию будет
//происходить вывод в консоль значения переменной i.

//Ключевое слово continue прерывает текущую итерацию цикла и переходит к следующей.
//В качестве примера рассмотрим такой код:
//
//for (i = 1; i < 10; i = i + 1) {
//  if (i == 5) {
//    continue;
//  }
//  console.log('i= ' + i);
//}
//В данном случае continue помешает выполниться выводу в консоль при значении переменной равном 5, все остальные
//значения будут напечатаны.