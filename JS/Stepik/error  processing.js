//А начнем мы изучение этой темы с понятия "Исключение". Рассмотрим несколько терминов:
//
//Исключение - это некоторое событие, сигнализирующее о возникновении нештатной ситуации или ошибки.
//Возбудить, (создать, бросить) исключение - просигнализировать о такой ошибке или исключительной ситуации.
//Перехватить исключение - значит предпринять действия по обработке исключения и восстановления нормальной работоспособности кода.
//
//Возбуждение исключения производится оператором "throw", перехват - командой "catch" (точнее связкой операторов
// "try-catch-finally").

//Синтаксис оператора throw выглядит следующим образом:
//
//throw выражение;
//"выражение" (или результат его вычисления) может представлять из себя практически любой тип данных: строку, число, булево
//значение, объект. Например число, представляющее код ошибки, строку, содержащую текст ошибки.
//
//
//
//Например, приведенный ниже пример демонстрирует проверку входного параметра в рекурсивной функции при вычислении:
//
//function testFactorial(inputData) {
//
//  if (inputData == 0) {return 1}
//  if (inputData < 0)                             // Проверяем - положительное ли число
//    throw "Число не должно быть меньше нуля";    // Если отрицательное - "бросаем" исключение
//
//  return (inputData - 1)?(inputData * testFactorial(inputData - 1)):inputData;
//
//}
//В этом примере, если на вход функции будет подано число меньше 0, то будет сгенерирована ошибка с текстом "Число не
//должно быть меньше нуля" и произойдет выход из функции.
//
//Если ввод корректный, то будет вычислен факториал числа, поданного на вход.

//Как только исключение создано, интерпретатор JavaScript прерывает нормальное выполнение кода и начинает поиск обработчика
//исключений - конструкции try/catch/finally.
//
//Синтаксис этой конструкции выглядит следующим образом:
//
//try {
//  // код, который нужно "попробовать"
//  // в этом коде может быть брошено исключение
//} catch(exception_variable) {
//  // в этом месте пишется код, который выполняется только в случае обнаружения
//  // исключения в предыдущем блоке "trу"
//  // в случае возникновения исключения, в переменную exception_variable будет передан
//  // код возникшей ошибки, например аргумент оператора throw
//} finally {
//  // Код в этом блоке будет выполнен всегда, независимо от результата завершения блока try:
//  // и при завершении без ошибки, и при завершении с ошибкой, и при завершении по любому оператору перехода
//  // (break, continue, return)
//}
//Блоки catch и finally не являются строго обязательными, однако хотя бы один из них должен присутствовать в конструкции.

//Давайте рассмотрим пример с использованием функции factorial(), созданной в течение этого урока.
//
//
//// Объявление функции
//function testFactorial(inputData) {
//
//  if (inputData == 0) {return 1}
//  if (inputData < 0)                           // Проверяем - положительное ли число
//    throw "Число не должно быть меньше нуля";      // Если отрицательное - "бросаем" исключение
//  return (inputData - 1) ? (inputData * testFactorial(inputData - 1)) : inputData;
//}
//
//// инициируем переменную для входного параметра, зададим ее вручную в этом примере
//var myNumber = -5;
//
//// начало конструкции обработки ошибок
//try {
//  document.write(testFactorial(myNumber));    //  попытка вызова функции
//} catch(ex) {
//  document.write(ex); // если в функции произойдет исключение, то будет выведен текст,
//// который мы использовали в параметре оператора throw
//}
//В этом примере мы не использовали блок finally, он нам тут не нужен. Если вы помните, минимум один любой из блоков
//finally и catch может быть использован в конструкции, оба - не обязательно.

//Очень важный момент - конструкции try/catch/finally могут быть многократно вложенными. В такой ситуации нам зачастую
//необходимо проверить - а что за исключение возникло, и если это не то исключение, которое мы ждали и готовы обработать,
//"не наше", то нужно его отправить дальше. Вариант "не перехватывать" мы реализовать не можем, однако можно перехватить,
//проверить и если это не то, что нужно - сгенерировать заново, как бы послать дальше.

//Давайте посмотрим, как бы мы реализовали предыдущий пример с таким уточнением:
//
//
//// Объявление функции
//function testFactorial(inputData) {
//  if (inputData < 0)                             // Проверяем - положительное ли число
//    throw "Число не должно быть меньше нуля";        // Если отрицательное - "бросаем" исключение
//  return (inputData - 1) ? (inputData * testFactorial(inputData - 1)) : inputData;
//}
//
//// инициируем переменную для входного параметра, зададим ее вручную в этом примере
//var myNumber = -5;
//
//// начало конструкции обработки ошибок
//try {
//  document.write(testFactorial(myNumber));      //  попытка вызова функции
//} catch(ex) {
//  if (ex != "Число не должно быть меньше нуля")     // Проверяем - если исключение не наше
//    throw (ex);                                 // то "бросаем" его дальше, как бы пропускаем.
//  document.write(ex);                           // вывод строки ошибки если исключение "наше"
//}
//В этом примере мы перед тем как вывести ошибку на экран, проверяем - та ли это ошибка, которая была сгенерирована
//оператором throw в нашей функции. Если нет, то генерируем ее заново - как бы отправляем гулять дальше, в поисках
//своего catch.

//Также в процессе рассмотрения процесса обработки ошибок нам необходимо рассмотреть стандартный объект Error, который
//используется при возбуждении исключений.
//
//В принципе командой throw может быть выброшен практически любой объект, однако стандартно при возникновении ошибок
//выбрасывается объект класса Error или его подклассы.
//
//Синтаксис, который мы рассмотрим,  выглядит следующим образом:
//
//new Error(message);
//Этой командой создается новый экземпляр объекта Error, а текст "message" записывается в свойство объекта с message.
//
//Самый простой пример вызова конструктора Error выглядит следующим образом.
//
//try {
//  throw new Error('Что-то пошло не так!');
//} catch (e) {
//  console.log(e.name + ': ' + e.message);
//}
//В данном примере мы создали объект типа Error с именем Error и текстом сообщения об ошибке "Что-то пошло не так !".

//Например, для использования объекта в функции из предыдущего примера, нам нужно было бы написать вот так:
//
//
//// Объявление функции
//function testFactorial(inputData) {
//  if (inputData < 0)                                    // Проверяем - положительное ли число
//    throw new Error("Число не должно быть меньше нуля");   // Создаем и бросаем экземпляр объекта Error
//  return (inputData) ? (inputData * testFactorial(inputData - 1)) : 1;
//}
//
//var myNumber = -5;
//
//try {
//    document.write(testFactorial(myNumber));    //  попытка вызова функции
//} catch(ex) {
//  document.write(ex.message);                 // вывод сообщения об ошибке
//}
//
//В данном случае мы перехватили исключение и вывели в документ его свойство message, в которое ранее поместили текст -
//"Число не должно быть меньше нуля".